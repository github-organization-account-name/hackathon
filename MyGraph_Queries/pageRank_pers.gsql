CREATE QUERY pageRank_pers (SET<VERTEX> source, FLOAT maxChange=0.001, INT maxIter=20, FLOAT damping=0.85, INT outputLimit=100) FOR GRAPH MyGraph {
# Compute the pageRank score for each vertex in the GRAPH, given a set of source vertices
# In each iteration, compute a score for activated vertices if they are source vertices:
#   score = (1-damping) + damping*sum(received scores FROM its neighbors).
# If they are not source vertices, then score = damping*sum(received scores FROM its neighbors).
# The personalized pageRank algorithm stops when either of the following is true:
#  a) it reaches maxIter iterations;
#  b) the max score change for any vertex compared to the last iteration <= maxChange.

        TYPEDEF TUPLE<vertex Vertex_ID, FLOAT lng, FLOAT lat, STRING name, FLOAT score> vertexScore;
        HeapAccum<vertexScore>(outputLimit, score DESC) @@topScores;
        MaxAccum<float> @@maxDiff = 9999; # max score change in an iteration
        SumAccum<float> @received_score = 0; # sum of scores each vertex receives FROM neighbors
        SumAccum<float> @score = 0;   # Initial score for every vertex is 0.
        SetAccum<EDGE> @@edgeSet;                   # list of all edges, if display is needed
        OrAccum @is_source;   
       
        Start = {source};   #  Start with a set of vertices
        Start = SELECT s
                FROM  Start:s
                ACCUM s.@score = 1,   # Only set score of source vertices to 1
                      s.@is_source = true;
        Total = Start;
        WHILE @@maxDiff > maxChange LIMIT maxIter DO
              @@maxDiff = 0;
              V_tmp = SELECT t      # Only update score for activated vertices
                      FROM Start:s -(flight_to:e)-> :t
                      ACCUM t.@received_score += s.@score/(s.outdegree("flight_to"));
              T = Start UNION V_tmp;
              Start = SELECT s
                      FROM T:s
                      POST-ACCUM
                          # For source vertices, if it's activated, then add damping; if not activated, do not need to update
                          IF s.@is_source == true
                          THEN s.@score = (1.0-damping) + damping * s.@received_score
                          ELSE s.@score = damping * s.@received_score
                          END,
                          s.@received_score = 0,
                          @@maxDiff += abs(s.@score - s.@score');
              Total = Total UNION T; 
        END; # END WHILE loop

        IF outputLimit > 0 THEN
                Total = SELECT s FROM Total:s
                        ACCUM @@topScores += vertexScore(s, s.longitude, s.latitude, s.name, s.@score);
                PRINT @@topScores;
        END;

}