CREATE QUERY shortest_path_weighted(/* Parameters here */VERTEX<Airport> source, VERTEX<Airport> terminal) FOR GRAPH MyGraph { 
  /* Write query logic here */ 
  TYPEDEF TUPLE<FLOAT dist, VERTEX pred> pathTuple; 
        TYPEDEF TUPLE<VERTEX id, FLOAT lat, FLOAT lon, STRING name> pathVertex;
        HeapAccum<pathTuple>(1, dist ASC) @minPath;
        ListAccum<pathVertex> @path;                 # shortest path FROM source
        SetAccum<EDGE> @@edgeSet;               # list of all edges, if display is needed
        OrAccum @visited;
        STRING sourceName;
        INT iter;
        BOOL negativeCycle;
        total = {source};                       # the connected vertices
        start = {source};

              
        ##### Get the connected vertices
        start = SELECT s
                FROM start:s
                ACCUM s.@minPath += pathTuple(0, s),
                      s.@visited = TRUE,
                      #s.@path += s;
                      s.@path += pathVertex(s, s.latitude, s.longitude, s.name);
        WHILE start.size() > 0 DO
                start = SELECT t
                        FROM start:s -(flight_route:e)-> :t
                        WHERE NOT t.@visited
                        ACCUM t.@visited = TRUE;
                total = total UNION start;
        END;
        
  ##### Do V-1 iterations: Consider whether each edge lowers the best-known distance.
        iter = total.size() - 1;    # the max iteration is V-1
        WHILE TRUE LIMIT iter DO 
                tmp = SELECT s
                      FROM total:s -(flight_route:e)-> :t
                      ACCUM 
                            IF s.@minPath.size()>0 AND s.@minPath.top().dist < GSQL_INT_MAX THEN
                                t.@minPath += pathTuple(s.@minPath.top().dist + e.miles, s)
                            END;     
        END;
        
  ##### Calculate the paths #####
  
        start = {source};
        tmp = SELECT s
              FROM total:s
              WHERE s != source
              ACCUM s.@visited = FALSE;
        WHILE start.size() > 0 LIMIT iter DO # Limit the number of hops
                start = SELECT t
                        FROM start:s -(flight_route:e)-> :t
                        WHERE NOT t.@visited
                        ACCUM IF s == t.@minPath.top().pred THEN 
                                  t.@visited = TRUE,
                                  t.@path += s.@path,
                                  #t.@path += t
                                  t.@path += pathVertex(t, t.latitude, t.longitude, t.name)
                              END;
        END;
          
  ##### Print the results #####
        total = SELECT s FROM total:s WHERE s == terminal;
        PRINT total[total.@minPath.top().dist, total.@path];
}