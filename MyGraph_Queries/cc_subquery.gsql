CREATE QUERY cc_subquery (VERTEX source, INT numVert, INT maxHops) FOR GRAPH MyGraph RETURNS(FLOAT) {
# Subquery returns closeness centrality for vertex source in graph with numVert vertices 
        SumAccum<int> @@currDist, @@totalDist;
         OrAccum<bool> @visited;
 
# Initialize: Set the input vertex source as the starting point
        Start = {source};
        Start = SELECT s FROM Start:s
                ACCUM s.@visited += true;
 
# totalDist = sum (distance between vertex s and all connected neighbors)
        WHILE (Start.size() > 0) LIMIT maxHops DO    # explore up to (maxHops) hops FROM s
                @@currDist += 1;
                # Move FROM the current start set to the neighboring set of (unvisited) vertices
                Start = SELECT t FROM Start:s -(flight_to:e)-> :t
                        WHERE t.@visited == false AND t != s
                        POST-ACCUM t.@visited += true;
                                   @@totalDist += Start.size() * @@currDist;
        END;
 
        IF @@totalDist > 0 THEN
                RETURN ((numVert - 1) * 1.0) / (@@totalDist * 1.0);
        ELSE
                RETURN (-1.0);
        END;
 }