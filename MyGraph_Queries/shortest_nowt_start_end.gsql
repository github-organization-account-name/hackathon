CREATE QUERY shortest_nowt_start_end(VERTEX S, VERTEX T, int maxDepth, BOOL display) FOR GRAPH MyGraph {

  OrAccum @@found  = false;
  OrAccum @notSeen = true;
  SetAccum<STRING> @pathResult_1;
  Start (ANY) = {S};
  Paths = {};
  Start = SELECT v
    FROM Start:v
    //assume each vertex has an id attribute
    ACCUM v.@notSeen = false, 
          v.@pathResult_1 = v.id;
  WHILE NOT @@found LIMIT maxDepth DO
    Start = SELECT v
      FROM Start - (:e) -> :v
      WHERE v.@notSeen
      ACCUM v.@notSeen = false,
            //add partial result paths to target v. v2.0 ListAccum requires FOREACH.
            FOREACH path_1 IN Start.@pathResult_1 DO
                v.@pathResult_1 += (path_1 + "->" + v.id)
            END,
            CASE WHEN v == T
              THEN @@found += true
            END;
  END;
  
  IF @@found THEN
    Result_1 = {T};
    Result_2 = {T};
    #PRINT Result.@pathResult;         #JSON output API version v1
    PRINT Result_1 [Result_1.@pathResult_1]; #JSON output API version v2
  ELSE 
    PRINT "Can't find shortest path within max steps";
  END;
}